$_mod.def("/mocha-puppeteer$0.14.0/lib/pages/test-page/run-tests", function(require, exports, module, __filename, __dirname) { var cov_22yequbji1 = function () {
  var path = 'run-tests.js',
      hash = '413f2fc2cdd6a6c0f1b6b7b0f81577771e30c31e',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: 'run-tests.js',
    statementMap: {
      '0': {
        start: {
          line: 1,
          column: 58
        },
        end: {
          line: 1,
          column: 64
        }
      },
      '1': {
        start: {
          line: 2,
          column: 27
        },
        end: {
          line: 2,
          column: 35
        }
      },
      '2': {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 8,
          column: 8
        }
      },
      '3': {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 7,
          column: 44
        }
      },
      '4': {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 59
        }
      },
      '5': {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 51,
          column: 2
        }
      },
      '6': {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      '7': {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 18,
          column: 7
        }
      },
      '8': {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 35
        }
      },
      '9': {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 29,
          column: 3
        }
      },
      '10': {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 27,
          column: 7
        }
      },
      '11': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 26
        }
      },
      '12': {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 28
        }
      },
      '13': {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 24
        }
      },
      '14': {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 37,
          column: 4
        }
      },
      '15': {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 23
        }
      },
      '16': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 41,
          column: 4
        }
      },
      '17': {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 29
        }
      },
      '18': {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 50,
          column: 4
        }
      },
      '19': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 49,
          column: 8
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 5,
            column: 31
          },
          end: {
            line: 5,
            column: 32
          }
        },
        loc: {
          start: {
            line: 5,
            column: 43
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 5
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 12,
            column: 33
          }
        },
        loc: {
          start: {
            line: 12,
            column: 38
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 12
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 14,
            column: 32
          }
        },
        loc: {
          start: {
            line: 14,
            column: 47
          },
          end: {
            line: 19,
            column: 3
          }
        },
        line: 14
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 17
          }
        },
        loc: {
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 29,
            column: 3
          }
        },
        line: 23
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 35,
            column: 23
          }
        },
        loc: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 37,
            column: 3
          }
        },
        line: 35
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 39,
            column: 23
          },
          end: {
            line: 39,
            column: 24
          }
        },
        loc: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 41,
            column: 3
          }
        },
        line: 39
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 43,
            column: 22
          }
        },
        loc: {
          start: {
            line: 43,
            column: 38
          },
          end: {
            line: 50,
            column: 3
          }
        },
        line: 43
      }
    },
    branchMap: {},
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    b: {},
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { mocha, Mocha, WebSocket, superagent, location } = (cov_22yequbji1.s[0]++, window);
const { hostname, port } = (cov_22yequbji1.s[1]++, location);

// end test if not started within one second
const testTimeout = (cov_22yequbji1.s[2]++, setTimeout(async () => {
  cov_22yequbji1.f[0]++;
  cov_22yequbji1.s[3]++;

  await superagent.post('/end-test').send({ errorMsg: 'No tests detected' });
}, 1000));

const socket = (cov_22yequbji1.s[4]++, new WebSocket(`ws://${hostname}:${port}/ws`));

cov_22yequbji1.s[5]++;
socket.addEventListener('open', () => {
  cov_22yequbji1.f[1]++;
  cov_22yequbji1.s[6]++;

  // patch stdout to send strings written to stdout
  Mocha.process.stdout.write = function (data) {
    cov_22yequbji1.f[2]++;
    cov_22yequbji1.s[7]++;

    socket.send(JSON.stringify({
      type: 'stdout',
      data
    }));
  };

  // patch console log to send logs
  const oldConsoleLog = (cov_22yequbji1.s[8]++, console.log);
  cov_22yequbji1.s[9]++;
  console.log = function (...args) {
    cov_22yequbji1.f[3]++;
    cov_22yequbji1.s[10]++;

    socket.send(JSON.stringify({
      type: 'console',
      data: args
    }));
    cov_22yequbji1.s[11]++;
    oldConsoleLog(...args);
  };

  const runner = (cov_22yequbji1.s[12]++, mocha.run());

  let testsPassed = (cov_22yequbji1.s[13]++, true);

  cov_22yequbji1.s[14]++;
  runner.once('fail', () => {
    cov_22yequbji1.f[4]++;
    cov_22yequbji1.s[15]++;

    testsPassed = false;
  });

  cov_22yequbji1.s[16]++;
  runner.once('suite', () => {
    cov_22yequbji1.f[5]++;
    cov_22yequbji1.s[17]++;

    clearTimeout(testTimeout);
  });

  cov_22yequbji1.s[18]++;
  runner.once('end', async event => {
    cov_22yequbji1.f[6]++;
    cov_22yequbji1.s[19]++;

    await superagent.post('/end-test').send({
      testsPassed,
      // pass coverage report back to server
      coverageReport: window.__coverage__
    });
  });
});
});