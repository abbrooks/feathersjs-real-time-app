$_mod.def("/debug$4.1.1/src/common", function(require, exports, module, __filename, __dirname) { var cov_2rpw9h5isv = function () {
	var path = 'common.js',
	    hash = '97a091a16fa109cdadee392b698682ba409c7f9a',
	    Function = function () {}.constructor,
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: 'common.js',
		statementMap: {
			'0': {
				start: {
					line: 8,
					column: 1
				},
				end: {
					line: 8,
					column: 33
				}
			},
			'1': {
				start: {
					line: 9,
					column: 1
				},
				end: {
					line: 9,
					column: 35
				}
			},
			'2': {
				start: {
					line: 10,
					column: 1
				},
				end: {
					line: 10,
					column: 29
				}
			},
			'3': {
				start: {
					line: 11,
					column: 1
				},
				end: {
					line: 11,
					column: 31
				}
			},
			'4': {
				start: {
					line: 12,
					column: 1
				},
				end: {
					line: 12,
					column: 29
				}
			},
			'5': {
				start: {
					line: 13,
					column: 1
				},
				end: {
					line: 13,
					column: 31
				}
			},
			'6': {
				start: {
					line: 14,
					column: 1
				},
				end: {
					line: 14,
					column: 38
				}
			},
			'7': {
				start: {
					line: 16,
					column: 1
				},
				end: {
					line: 18,
					column: 4
				}
			},
			'8': {
				start: {
					line: 17,
					column: 2
				},
				end: {
					line: 17,
					column: 30
				}
			},
			'9': {
				start: {
					line: 23,
					column: 1
				},
				end: {
					line: 23,
					column: 28
				}
			},
			'10': {
				start: {
					line: 29,
					column: 1
				},
				end: {
					line: 29,
					column: 24
				}
			},
			'11': {
				start: {
					line: 30,
					column: 1
				},
				end: {
					line: 30,
					column: 24
				}
			},
			'12': {
				start: {
					line: 37,
					column: 1
				},
				end: {
					line: 37,
					column: 29
				}
			},
			'13': {
				start: {
					line: 46,
					column: 13
				},
				end: {
					line: 46,
					column: 14
				}
			},
			'14': {
				start: {
					line: 48,
					column: 2
				},
				end: {
					line: 51,
					column: 3
				}
			},
			'15': {
				start: {
					line: 49,
					column: 3
				},
				end: {
					line: 49,
					column: 57
				}
			},
			'16': {
				start: {
					line: 50,
					column: 3
				},
				end: {
					line: 50,
					column: 13
				}
			},
			'17': {
				start: {
					line: 53,
					column: 2
				},
				end: {
					line: 53,
					column: 72
				}
			},
			'18': {
				start: {
					line: 55,
					column: 1
				},
				end: {
					line: 55,
					column: 39
				}
			},
			'19': {
				start: {
					line: 69,
					column: 3
				},
				end: {
					line: 71,
					column: 4
				}
			},
			'20': {
				start: {
					line: 70,
					column: 4
				},
				end: {
					line: 70,
					column: 11
				}
			},
			'21': {
				start: {
					line: 73,
					column: 16
				},
				end: {
					line: 73,
					column: 21
				}
			},
			'22': {
				start: {
					line: 76,
					column: 16
				},
				end: {
					line: 76,
					column: 34
				}
			},
			'23': {
				start: {
					line: 77,
					column: 14
				},
				end: {
					line: 77,
					column: 39
				}
			},
			'24': {
				start: {
					line: 78,
					column: 3
				},
				end: {
					line: 78,
					column: 18
				}
			},
			'25': {
				start: {
					line: 79,
					column: 3
				},
				end: {
					line: 79,
					column: 24
				}
			},
			'26': {
				start: {
					line: 80,
					column: 3
				},
				end: {
					line: 80,
					column: 20
				}
			},
			'27': {
				start: {
					line: 81,
					column: 3
				},
				end: {
					line: 81,
					column: 19
				}
			},
			'28': {
				start: {
					line: 83,
					column: 3
				},
				end: {
					line: 83,
					column: 41
				}
			},
			'29': {
				start: {
					line: 85,
					column: 3
				},
				end: {
					line: 88,
					column: 4
				}
			},
			'30': {
				start: {
					line: 87,
					column: 4
				},
				end: {
					line: 87,
					column: 23
				}
			},
			'31': {
				start: {
					line: 91,
					column: 15
				},
				end: {
					line: 91,
					column: 16
				}
			},
			'32': {
				start: {
					line: 92,
					column: 3
				},
				end: {
					line: 108,
					column: 6
				}
			},
			'33': {
				start: {
					line: 94,
					column: 4
				},
				end: {
					line: 96,
					column: 5
				}
			},
			'34': {
				start: {
					line: 95,
					column: 5
				},
				end: {
					line: 95,
					column: 18
				}
			},
			'35': {
				start: {
					line: 97,
					column: 4
				},
				end: {
					line: 97,
					column: 12
				}
			},
			'36': {
				start: {
					line: 98,
					column: 22
				},
				end: {
					line: 98,
					column: 52
				}
			},
			'37': {
				start: {
					line: 99,
					column: 4
				},
				end: {
					line: 106,
					column: 5
				}
			},
			'38': {
				start: {
					line: 100,
					column: 17
				},
				end: {
					line: 100,
					column: 28
				}
			},
			'39': {
				start: {
					line: 101,
					column: 5
				},
				end: {
					line: 101,
					column: 39
				}
			},
			'40': {
				start: {
					line: 104,
					column: 5
				},
				end: {
					line: 104,
					column: 27
				}
			},
			'41': {
				start: {
					line: 105,
					column: 5
				},
				end: {
					line: 105,
					column: 13
				}
			},
			'42': {
				start: {
					line: 107,
					column: 4
				},
				end: {
					line: 107,
					column: 17
				}
			},
			'43': {
				start: {
					line: 111,
					column: 3
				},
				end: {
					line: 111,
					column: 43
				}
			},
			'44': {
				start: {
					line: 113,
					column: 17
				},
				end: {
					line: 113,
					column: 44
				}
			},
			'45': {
				start: {
					line: 114,
					column: 3
				},
				end: {
					line: 114,
					column: 27
				}
			},
			'46': {
				start: {
					line: 117,
					column: 2
				},
				end: {
					line: 117,
					column: 30
				}
			},
			'47': {
				start: {
					line: 118,
					column: 2
				},
				end: {
					line: 118,
					column: 49
				}
			},
			'48': {
				start: {
					line: 119,
					column: 2
				},
				end: {
					line: 119,
					column: 44
				}
			},
			'49': {
				start: {
					line: 120,
					column: 2
				},
				end: {
					line: 120,
					column: 39
				}
			},
			'50': {
				start: {
					line: 121,
					column: 2
				},
				end: {
					line: 121,
					column: 26
				}
			},
			'51': {
				start: {
					line: 122,
					column: 2
				},
				end: {
					line: 122,
					column: 24
				}
			},
			'52': {
				start: {
					line: 127,
					column: 2
				},
				end: {
					line: 129,
					column: 3
				}
			},
			'53': {
				start: {
					line: 128,
					column: 3
				},
				end: {
					line: 128,
					column: 27
				}
			},
			'54': {
				start: {
					line: 131,
					column: 2
				},
				end: {
					line: 131,
					column: 36
				}
			},
			'55': {
				start: {
					line: 133,
					column: 2
				},
				end: {
					line: 133,
					column: 15
				}
			},
			'56': {
				start: {
					line: 137,
					column: 16
				},
				end: {
					line: 137,
					column: 51
				}
			},
			'57': {
				start: {
					line: 138,
					column: 2
				},
				end: {
					line: 141,
					column: 3
				}
			},
			'58': {
				start: {
					line: 139,
					column: 3
				},
				end: {
					line: 139,
					column: 42
				}
			},
			'59': {
				start: {
					line: 140,
					column: 3
				},
				end: {
					line: 140,
					column: 15
				}
			},
			'60': {
				start: {
					line: 142,
					column: 2
				},
				end: {
					line: 142,
					column: 15
				}
			},
			'61': {
				start: {
					line: 146,
					column: 19
				},
				end: {
					line: 146,
					column: 113
				}
			},
			'62': {
				start: {
					line: 147,
					column: 2
				},
				end: {
					line: 147,
					column: 26
				}
			},
			'63': {
				start: {
					line: 148,
					column: 2
				},
				end: {
					line: 148,
					column: 18
				}
			},
			'64': {
				start: {
					line: 159,
					column: 2
				},
				end: {
					line: 159,
					column: 31
				}
			},
			'65': {
				start: {
					line: 161,
					column: 2
				},
				end: {
					line: 161,
					column: 25
				}
			},
			'66': {
				start: {
					line: 162,
					column: 2
				},
				end: {
					line: 162,
					column: 25
				}
			},
			'67': {
				start: {
					line: 165,
					column: 16
				},
				end: {
					line: 165,
					column: 82
				}
			},
			'68': {
				start: {
					line: 166,
					column: 14
				},
				end: {
					line: 166,
					column: 26
				}
			},
			'69': {
				start: {
					line: 168,
					column: 2
				},
				end: {
					line: 181,
					column: 3
				}
			},
			'70': {
				start: {
					line: 169,
					column: 3
				},
				end: {
					line: 172,
					column: 4
				}
			},
			'71': {
				start: {
					line: 171,
					column: 4
				},
				end: {
					line: 171,
					column: 13
				}
			},
			'72': {
				start: {
					line: 174,
					column: 3
				},
				end: {
					line: 174,
					column: 47
				}
			},
			'73': {
				start: {
					line: 176,
					column: 3
				},
				end: {
					line: 180,
					column: 4
				}
			},
			'74': {
				start: {
					line: 177,
					column: 4
				},
				end: {
					line: 177,
					column: 73
				}
			},
			'75': {
				start: {
					line: 179,
					column: 4
				},
				end: {
					line: 179,
					column: 63
				}
			},
			'76': {
				start: {
					line: 183,
					column: 2
				},
				end: {
					line: 186,
					column: 3
				}
			},
			'77': {
				start: {
					line: 184,
					column: 20
				},
				end: {
					line: 184,
					column: 44
				}
			},
			'78': {
				start: {
					line: 185,
					column: 3
				},
				end: {
					line: 185,
					column: 62
				}
			},
			'79': {
				start: {
					line: 196,
					column: 21
				},
				end: {
					line: 199,
					column: 13
				}
			},
			'80': {
				start: {
					line: 198,
					column: 58
				},
				end: {
					line: 198,
					column: 73
				}
			},
			'81': {
				start: {
					line: 200,
					column: 2
				},
				end: {
					line: 200,
					column: 25
				}
			},
			'82': {
				start: {
					line: 201,
					column: 2
				},
				end: {
					line: 201,
					column: 20
				}
			},
			'83': {
				start: {
					line: 212,
					column: 2
				},
				end: {
					line: 214,
					column: 3
				}
			},
			'84': {
				start: {
					line: 213,
					column: 3
				},
				end: {
					line: 213,
					column: 15
				}
			},
			'85': {
				start: {
					line: 219,
					column: 2
				},
				end: {
					line: 223,
					column: 3
				}
			},
			'86': {
				start: {
					line: 220,
					column: 3
				},
				end: {
					line: 222,
					column: 4
				}
			},
			'87': {
				start: {
					line: 221,
					column: 4
				},
				end: {
					line: 221,
					column: 17
				}
			},
			'88': {
				start: {
					line: 225,
					column: 2
				},
				end: {
					line: 229,
					column: 3
				}
			},
			'89': {
				start: {
					line: 226,
					column: 3
				},
				end: {
					line: 228,
					column: 4
				}
			},
			'90': {
				start: {
					line: 227,
					column: 4
				},
				end: {
					line: 227,
					column: 16
				}
			},
			'91': {
				start: {
					line: 231,
					column: 2
				},
				end: {
					line: 231,
					column: 15
				}
			},
			'92': {
				start: {
					line: 242,
					column: 2
				},
				end: {
					line: 244,
					column: 28
				}
			},
			'93': {
				start: {
					line: 255,
					column: 2
				},
				end: {
					line: 257,
					column: 3
				}
			},
			'94': {
				start: {
					line: 256,
					column: 3
				},
				end: {
					line: 256,
					column: 35
				}
			},
			'95': {
				start: {
					line: 258,
					column: 2
				},
				end: {
					line: 258,
					column: 13
				}
			},
			'96': {
				start: {
					line: 261,
					column: 1
				},
				end: {
					line: 261,
					column: 40
				}
			},
			'97': {
				start: {
					line: 263,
					column: 1
				},
				end: {
					line: 263,
					column: 20
				}
			},
			'98': {
				start: {
					line: 266,
					column: 0
				},
				end: {
					line: 266,
					column: 23
				}
			}
		},
		fnMap: {
			'0': {
				name: 'setup',
				decl: {
					start: {
						line: 7,
						column: 9
					},
					end: {
						line: 7,
						column: 14
					}
				},
				loc: {
					start: {
						line: 7,
						column: 20
					},
					end: {
						line: 264,
						column: 1
					}
				},
				line: 7
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 16,
						column: 26
					},
					end: {
						line: 16,
						column: 27
					}
				},
				loc: {
					start: {
						line: 16,
						column: 33
					},
					end: {
						line: 18,
						column: 2
					}
				},
				line: 16
			},
			'2': {
				name: 'selectColor',
				decl: {
					start: {
						line: 45,
						column: 10
					},
					end: {
						line: 45,
						column: 21
					}
				},
				loc: {
					start: {
						line: 45,
						column: 33
					},
					end: {
						line: 54,
						column: 2
					}
				},
				line: 45
			},
			'3': {
				name: 'createDebug',
				decl: {
					start: {
						line: 64,
						column: 10
					},
					end: {
						line: 64,
						column: 21
					}
				},
				loc: {
					start: {
						line: 64,
						column: 33
					},
					end: {
						line: 134,
						column: 2
					}
				},
				line: 64
			},
			'4': {
				name: 'debug',
				decl: {
					start: {
						line: 67,
						column: 11
					},
					end: {
						line: 67,
						column: 16
					}
				},
				loc: {
					start: {
						line: 67,
						column: 26
					},
					end: {
						line: 115,
						column: 3
					}
				},
				line: 67
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 92,
						column: 46
					},
					end: {
						line: 92,
						column: 47
					}
				},
				loc: {
					start: {
						line: 92,
						column: 65
					},
					end: {
						line: 108,
						column: 4
					}
				},
				line: 92
			},
			'6': {
				name: 'destroy',
				decl: {
					start: {
						line: 136,
						column: 10
					},
					end: {
						line: 136,
						column: 17
					}
				},
				loc: {
					start: {
						line: 136,
						column: 20
					},
					end: {
						line: 143,
						column: 2
					}
				},
				line: 136
			},
			'7': {
				name: 'extend',
				decl: {
					start: {
						line: 145,
						column: 10
					},
					end: {
						line: 145,
						column: 16
					}
				},
				loc: {
					start: {
						line: 145,
						column: 39
					},
					end: {
						line: 149,
						column: 2
					}
				},
				line: 145
			},
			'8': {
				name: 'enable',
				decl: {
					start: {
						line: 158,
						column: 10
					},
					end: {
						line: 158,
						column: 16
					}
				},
				loc: {
					start: {
						line: 158,
						column: 29
					},
					end: {
						line: 187,
						column: 2
					}
				},
				line: 158
			},
			'9': {
				name: 'disable',
				decl: {
					start: {
						line: 195,
						column: 10
					},
					end: {
						line: 195,
						column: 17
					}
				},
				loc: {
					start: {
						line: 195,
						column: 20
					},
					end: {
						line: 202,
						column: 2
					}
				},
				line: 195
			},
			'10': {
				name: '(anonymous_10)',
				decl: {
					start: {
						line: 198,
						column: 45
					},
					end: {
						line: 198,
						column: 46
					}
				},
				loc: {
					start: {
						line: 198,
						column: 58
					},
					end: {
						line: 198,
						column: 73
					}
				},
				line: 198
			},
			'11': {
				name: 'enabled',
				decl: {
					start: {
						line: 211,
						column: 10
					},
					end: {
						line: 211,
						column: 17
					}
				},
				loc: {
					start: {
						line: 211,
						column: 24
					},
					end: {
						line: 232,
						column: 2
					}
				},
				line: 211
			},
			'12': {
				name: 'toNamespace',
				decl: {
					start: {
						line: 241,
						column: 10
					},
					end: {
						line: 241,
						column: 21
					}
				},
				loc: {
					start: {
						line: 241,
						column: 30
					},
					end: {
						line: 245,
						column: 2
					}
				},
				line: 241
			},
			'13': {
				name: 'coerce',
				decl: {
					start: {
						line: 254,
						column: 10
					},
					end: {
						line: 254,
						column: 16
					}
				},
				loc: {
					start: {
						line: 254,
						column: 22
					},
					end: {
						line: 259,
						column: 2
					}
				},
				line: 254
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 69,
						column: 3
					},
					end: {
						line: 71,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 69,
						column: 3
					},
					end: {
						line: 71,
						column: 4
					}
				}, {
					start: {
						line: 69,
						column: 3
					},
					end: {
						line: 71,
						column: 4
					}
				}],
				line: 69
			},
			'1': {
				loc: {
					start: {
						line: 77,
						column: 22
					},
					end: {
						line: 77,
						column: 38
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 77,
						column: 22
					},
					end: {
						line: 77,
						column: 30
					}
				}, {
					start: {
						line: 77,
						column: 34
					},
					end: {
						line: 77,
						column: 38
					}
				}],
				line: 77
			},
			'2': {
				loc: {
					start: {
						line: 85,
						column: 3
					},
					end: {
						line: 88,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 85,
						column: 3
					},
					end: {
						line: 88,
						column: 4
					}
				}, {
					start: {
						line: 85,
						column: 3
					},
					end: {
						line: 88,
						column: 4
					}
				}],
				line: 85
			},
			'3': {
				loc: {
					start: {
						line: 94,
						column: 4
					},
					end: {
						line: 96,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 94,
						column: 4
					},
					end: {
						line: 96,
						column: 5
					}
				}, {
					start: {
						line: 94,
						column: 4
					},
					end: {
						line: 96,
						column: 5
					}
				}],
				line: 94
			},
			'4': {
				loc: {
					start: {
						line: 99,
						column: 4
					},
					end: {
						line: 106,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 99,
						column: 4
					},
					end: {
						line: 106,
						column: 5
					}
				}, {
					start: {
						line: 99,
						column: 4
					},
					end: {
						line: 106,
						column: 5
					}
				}],
				line: 99
			},
			'5': {
				loc: {
					start: {
						line: 113,
						column: 17
					},
					end: {
						line: 113,
						column: 44
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 113,
						column: 17
					},
					end: {
						line: 113,
						column: 25
					}
				}, {
					start: {
						line: 113,
						column: 29
					},
					end: {
						line: 113,
						column: 44
					}
				}],
				line: 113
			},
			'6': {
				loc: {
					start: {
						line: 127,
						column: 2
					},
					end: {
						line: 129,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 127,
						column: 2
					},
					end: {
						line: 129,
						column: 3
					}
				}, {
					start: {
						line: 127,
						column: 2
					},
					end: {
						line: 129,
						column: 3
					}
				}],
				line: 127
			},
			'7': {
				loc: {
					start: {
						line: 138,
						column: 2
					},
					end: {
						line: 141,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 138,
						column: 2
					},
					end: {
						line: 141,
						column: 3
					}
				}, {
					start: {
						line: 138,
						column: 2
					},
					end: {
						line: 141,
						column: 3
					}
				}],
				line: 138
			},
			'8': {
				loc: {
					start: {
						line: 146,
						column: 49
					},
					end: {
						line: 146,
						column: 99
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 146,
						column: 84
					},
					end: {
						line: 146,
						column: 87
					}
				}, {
					start: {
						line: 146,
						column: 90
					},
					end: {
						line: 146,
						column: 99
					}
				}],
				line: 146
			},
			'9': {
				loc: {
					start: {
						line: 165,
						column: 17
					},
					end: {
						line: 165,
						column: 65
					}
				},
				type: 'cond-expr',
				locations: [{
					start: {
						line: 165,
						column: 50
					},
					end: {
						line: 165,
						column: 60
					}
				}, {
					start: {
						line: 165,
						column: 63
					},
					end: {
						line: 165,
						column: 65
					}
				}],
				line: 165
			},
			'10': {
				loc: {
					start: {
						line: 169,
						column: 3
					},
					end: {
						line: 172,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 169,
						column: 3
					},
					end: {
						line: 172,
						column: 4
					}
				}, {
					start: {
						line: 169,
						column: 3
					},
					end: {
						line: 172,
						column: 4
					}
				}],
				line: 169
			},
			'11': {
				loc: {
					start: {
						line: 176,
						column: 3
					},
					end: {
						line: 180,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 176,
						column: 3
					},
					end: {
						line: 180,
						column: 4
					}
				}, {
					start: {
						line: 176,
						column: 3
					},
					end: {
						line: 180,
						column: 4
					}
				}],
				line: 176
			},
			'12': {
				loc: {
					start: {
						line: 212,
						column: 2
					},
					end: {
						line: 214,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 212,
						column: 2
					},
					end: {
						line: 214,
						column: 3
					}
				}, {
					start: {
						line: 212,
						column: 2
					},
					end: {
						line: 214,
						column: 3
					}
				}],
				line: 212
			},
			'13': {
				loc: {
					start: {
						line: 220,
						column: 3
					},
					end: {
						line: 222,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 220,
						column: 3
					},
					end: {
						line: 222,
						column: 4
					}
				}, {
					start: {
						line: 220,
						column: 3
					},
					end: {
						line: 222,
						column: 4
					}
				}],
				line: 220
			},
			'14': {
				loc: {
					start: {
						line: 226,
						column: 3
					},
					end: {
						line: 228,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 226,
						column: 3
					},
					end: {
						line: 228,
						column: 4
					}
				}, {
					start: {
						line: 226,
						column: 3
					},
					end: {
						line: 228,
						column: 4
					}
				}],
				line: 226
			},
			'15': {
				loc: {
					start: {
						line: 255,
						column: 2
					},
					end: {
						line: 257,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 255,
						column: 2
					},
					end: {
						line: 257,
						column: 3
					}
				}, {
					start: {
						line: 255,
						column: 2
					},
					end: {
						line: 257,
						column: 3
					}
				}],
				line: 255
			},
			'16': {
				loc: {
					start: {
						line: 256,
						column: 10
					},
					end: {
						line: 256,
						column: 34
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 256,
						column: 10
					},
					end: {
						line: 256,
						column: 19
					}
				}, {
					start: {
						line: 256,
						column: 23
					},
					end: {
						line: 256,
						column: 34
					}
				}],
				line: 256
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0,
			'40': 0,
			'41': 0,
			'42': 0,
			'43': 0,
			'44': 0,
			'45': 0,
			'46': 0,
			'47': 0,
			'48': 0,
			'49': 0,
			'50': 0,
			'51': 0,
			'52': 0,
			'53': 0,
			'54': 0,
			'55': 0,
			'56': 0,
			'57': 0,
			'58': 0,
			'59': 0,
			'60': 0,
			'61': 0,
			'62': 0,
			'63': 0,
			'64': 0,
			'65': 0,
			'66': 0,
			'67': 0,
			'68': 0,
			'69': 0,
			'70': 0,
			'71': 0,
			'72': 0,
			'73': 0,
			'74': 0,
			'75': 0,
			'76': 0,
			'77': 0,
			'78': 0,
			'79': 0,
			'80': 0,
			'81': 0,
			'82': 0,
			'83': 0,
			'84': 0,
			'85': 0,
			'86': 0,
			'87': 0,
			'88': 0,
			'89': 0,
			'90': 0,
			'91': 0,
			'92': 0,
			'93': 0,
			'94': 0,
			'95': 0,
			'96': 0,
			'97': 0,
			'98': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0
		},
		b: {
			'0': [0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0],
			'5': [0, 0],
			'6': [0, 0],
			'7': [0, 0],
			'8': [0, 0],
			'9': [0, 0],
			'10': [0, 0],
			'11': [0, 0],
			'12': [0, 0],
			'13': [0, 0],
			'14': [0, 0],
			'15': [0, 0],
			'16': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	cov_2rpw9h5isv.f[0]++;
	cov_2rpw9h5isv.s[0]++;

	createDebug.debug = createDebug;
	cov_2rpw9h5isv.s[1]++;
	createDebug.default = createDebug;
	cov_2rpw9h5isv.s[2]++;
	createDebug.coerce = coerce;
	cov_2rpw9h5isv.s[3]++;
	createDebug.disable = disable;
	cov_2rpw9h5isv.s[4]++;
	createDebug.enable = enable;
	cov_2rpw9h5isv.s[5]++;
	createDebug.enabled = enabled;
	cov_2rpw9h5isv.s[6]++;
	createDebug.humanize = require('/ms$2.1.2/index'/*'ms'*/);

	cov_2rpw9h5isv.s[7]++;
	Object.keys(env).forEach(key => {
		cov_2rpw9h5isv.f[1]++;
		cov_2rpw9h5isv.s[8]++;

		createDebug[key] = env[key];
	});

	/**
 * Active `debug` instances.
 */
	cov_2rpw9h5isv.s[9]++;
	createDebug.instances = [];

	/**
 * The currently active debug mode names, and names to skip.
 */

	cov_2rpw9h5isv.s[10]++;
	createDebug.names = [];
	cov_2rpw9h5isv.s[11]++;
	createDebug.skips = [];

	/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */
	cov_2rpw9h5isv.s[12]++;
	createDebug.formatters = {};

	/**
 * Selects a color for a debug namespace
 * @param {String} namespace The namespace string for the for the debug instance to be colored
 * @return {Number|String} An ANSI color code for the given namespace
 * @api private
 */
	function selectColor(namespace) {
		cov_2rpw9h5isv.f[2]++;

		let hash = (cov_2rpw9h5isv.s[13]++, 0);

		cov_2rpw9h5isv.s[14]++;
		for (let i = 0; i < namespace.length; i++) {
			cov_2rpw9h5isv.s[15]++;

			hash = (hash << 5) - hash + namespace.charCodeAt(i);
			cov_2rpw9h5isv.s[16]++;
			hash |= 0; // Convert to 32bit integer
		}

		cov_2rpw9h5isv.s[17]++;
		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	cov_2rpw9h5isv.s[18]++;
	createDebug.selectColor = selectColor;

	/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */
	function createDebug(namespace) {
		cov_2rpw9h5isv.f[3]++;

		let prevTime;

		function debug(...args) {
			cov_2rpw9h5isv.f[4]++;
			cov_2rpw9h5isv.s[19]++;

			// Disabled?
			if (!debug.enabled) {
				cov_2rpw9h5isv.b[0][0]++;
				cov_2rpw9h5isv.s[20]++;

				return;
			} else {
				cov_2rpw9h5isv.b[0][1]++;
			}

			const self = (cov_2rpw9h5isv.s[21]++, debug);

			// Set `diff` timestamp
			const curr = (cov_2rpw9h5isv.s[22]++, Number(new Date()));
			const ms = (cov_2rpw9h5isv.s[23]++, curr - ((cov_2rpw9h5isv.b[1][0]++, prevTime) || (cov_2rpw9h5isv.b[1][1]++, curr)));
			cov_2rpw9h5isv.s[24]++;
			self.diff = ms;
			cov_2rpw9h5isv.s[25]++;
			self.prev = prevTime;
			cov_2rpw9h5isv.s[26]++;
			self.curr = curr;
			cov_2rpw9h5isv.s[27]++;
			prevTime = curr;

			cov_2rpw9h5isv.s[28]++;
			args[0] = createDebug.coerce(args[0]);

			cov_2rpw9h5isv.s[29]++;
			if (typeof args[0] !== 'string') {
				cov_2rpw9h5isv.b[2][0]++;
				cov_2rpw9h5isv.s[30]++;

				// Anything else let's inspect with %O
				args.unshift('%O');
			} else {
				cov_2rpw9h5isv.b[2][1]++;
			}

			// Apply any `formatters` transformations
			let index = (cov_2rpw9h5isv.s[31]++, 0);
			cov_2rpw9h5isv.s[32]++;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				cov_2rpw9h5isv.f[5]++;
				cov_2rpw9h5isv.s[33]++;

				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					cov_2rpw9h5isv.b[3][0]++;
					cov_2rpw9h5isv.s[34]++;

					return match;
				} else {
					cov_2rpw9h5isv.b[3][1]++;
				}
				cov_2rpw9h5isv.s[35]++;
				index++;
				const formatter = (cov_2rpw9h5isv.s[36]++, createDebug.formatters[format]);
				cov_2rpw9h5isv.s[37]++;
				if (typeof formatter === 'function') {
					cov_2rpw9h5isv.b[4][0]++;

					const val = (cov_2rpw9h5isv.s[38]++, args[index]);
					cov_2rpw9h5isv.s[39]++;
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					cov_2rpw9h5isv.s[40]++;
					args.splice(index, 1);
					cov_2rpw9h5isv.s[41]++;
					index--;
				} else {
					cov_2rpw9h5isv.b[4][1]++;
				}
				cov_2rpw9h5isv.s[42]++;
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			cov_2rpw9h5isv.s[43]++;
			createDebug.formatArgs.call(self, args);

			const logFn = (cov_2rpw9h5isv.s[44]++, (cov_2rpw9h5isv.b[5][0]++, self.log) || (cov_2rpw9h5isv.b[5][1]++, createDebug.log));
			cov_2rpw9h5isv.s[45]++;
			logFn.apply(self, args);
		}

		cov_2rpw9h5isv.s[46]++;
		debug.namespace = namespace;
		cov_2rpw9h5isv.s[47]++;
		debug.enabled = createDebug.enabled(namespace);
		cov_2rpw9h5isv.s[48]++;
		debug.useColors = createDebug.useColors();
		cov_2rpw9h5isv.s[49]++;
		debug.color = selectColor(namespace);
		cov_2rpw9h5isv.s[50]++;
		debug.destroy = destroy;
		cov_2rpw9h5isv.s[51]++;
		debug.extend = extend;
		// Debug.formatArgs = formatArgs;
		// debug.rawLog = rawLog;

		// env-specific initialization logic for debug instances
		cov_2rpw9h5isv.s[52]++;
		if (typeof createDebug.init === 'function') {
			cov_2rpw9h5isv.b[6][0]++;
			cov_2rpw9h5isv.s[53]++;

			createDebug.init(debug);
		} else {
			cov_2rpw9h5isv.b[6][1]++;
		}

		cov_2rpw9h5isv.s[54]++;
		createDebug.instances.push(debug);

		cov_2rpw9h5isv.s[55]++;
		return debug;
	}

	function destroy() {
		cov_2rpw9h5isv.f[6]++;

		const index = (cov_2rpw9h5isv.s[56]++, createDebug.instances.indexOf(this));
		cov_2rpw9h5isv.s[57]++;
		if (index !== -1) {
			cov_2rpw9h5isv.b[7][0]++;
			cov_2rpw9h5isv.s[58]++;

			createDebug.instances.splice(index, 1);
			cov_2rpw9h5isv.s[59]++;
			return true;
		} else {
			cov_2rpw9h5isv.b[7][1]++;
		}
		cov_2rpw9h5isv.s[60]++;
		return false;
	}

	function extend(namespace, delimiter) {
		cov_2rpw9h5isv.f[7]++;

		const newDebug = (cov_2rpw9h5isv.s[61]++, createDebug(this.namespace + (typeof delimiter === 'undefined' ? (cov_2rpw9h5isv.b[8][0]++, ':') : (cov_2rpw9h5isv.b[8][1]++, delimiter)) + namespace));
		cov_2rpw9h5isv.s[62]++;
		newDebug.log = this.log;
		cov_2rpw9h5isv.s[63]++;
		return newDebug;
	}

	/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */
	function enable(namespaces) {
		cov_2rpw9h5isv.f[8]++;
		cov_2rpw9h5isv.s[64]++;

		createDebug.save(namespaces);

		cov_2rpw9h5isv.s[65]++;
		createDebug.names = [];
		cov_2rpw9h5isv.s[66]++;
		createDebug.skips = [];

		let i;
		const split = (cov_2rpw9h5isv.s[67]++, (typeof namespaces === 'string' ? (cov_2rpw9h5isv.b[9][0]++, namespaces) : (cov_2rpw9h5isv.b[9][1]++, '')).split(/[\s,]+/));
		const len = (cov_2rpw9h5isv.s[68]++, split.length);

		cov_2rpw9h5isv.s[69]++;
		for (i = 0; i < len; i++) {
			cov_2rpw9h5isv.s[70]++;

			if (!split[i]) {
				cov_2rpw9h5isv.b[10][0]++;
				cov_2rpw9h5isv.s[71]++;

				// ignore empty strings
				continue;
			} else {
				cov_2rpw9h5isv.b[10][1]++;
			}

			cov_2rpw9h5isv.s[72]++;
			namespaces = split[i].replace(/\*/g, '.*?');

			cov_2rpw9h5isv.s[73]++;
			if (namespaces[0] === '-') {
				cov_2rpw9h5isv.b[11][0]++;
				cov_2rpw9h5isv.s[74]++;

				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				cov_2rpw9h5isv.b[11][1]++;
				cov_2rpw9h5isv.s[75]++;

				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}

		cov_2rpw9h5isv.s[76]++;
		for (i = 0; i < createDebug.instances.length; i++) {
			const instance = (cov_2rpw9h5isv.s[77]++, createDebug.instances[i]);
			cov_2rpw9h5isv.s[78]++;
			instance.enabled = createDebug.enabled(instance.namespace);
		}
	}

	/**
 * Disable debug output.
 *
 * @return {String} namespaces
 * @api public
 */
	function disable() {
		cov_2rpw9h5isv.f[9]++;

		const namespaces = (cov_2rpw9h5isv.s[79]++, [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => {
			cov_2rpw9h5isv.f[10]++;
			cov_2rpw9h5isv.s[80]++;
			return '-' + namespace;
		})].join(','));
		cov_2rpw9h5isv.s[81]++;
		createDebug.enable('');
		cov_2rpw9h5isv.s[82]++;
		return namespaces;
	}

	/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */
	function enabled(name) {
		cov_2rpw9h5isv.f[11]++;
		cov_2rpw9h5isv.s[83]++;

		if (name[name.length - 1] === '*') {
			cov_2rpw9h5isv.b[12][0]++;
			cov_2rpw9h5isv.s[84]++;

			return true;
		} else {
			cov_2rpw9h5isv.b[12][1]++;
		}

		let i;
		let len;

		cov_2rpw9h5isv.s[85]++;
		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			cov_2rpw9h5isv.s[86]++;

			if (createDebug.skips[i].test(name)) {
				cov_2rpw9h5isv.b[13][0]++;
				cov_2rpw9h5isv.s[87]++;

				return false;
			} else {
				cov_2rpw9h5isv.b[13][1]++;
			}
		}

		cov_2rpw9h5isv.s[88]++;
		for (i = 0, len = createDebug.names.length; i < len; i++) {
			cov_2rpw9h5isv.s[89]++;

			if (createDebug.names[i].test(name)) {
				cov_2rpw9h5isv.b[14][0]++;
				cov_2rpw9h5isv.s[90]++;

				return true;
			} else {
				cov_2rpw9h5isv.b[14][1]++;
			}
		}

		cov_2rpw9h5isv.s[91]++;
		return false;
	}

	/**
 * Convert regexp to namespace
 *
 * @param {RegExp} regxep
 * @return {String} namespace
 * @api private
 */
	function toNamespace(regexp) {
		cov_2rpw9h5isv.f[12]++;
		cov_2rpw9h5isv.s[92]++;

		return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
	}

	/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */
	function coerce(val) {
		cov_2rpw9h5isv.f[13]++;
		cov_2rpw9h5isv.s[93]++;

		if (val instanceof Error) {
			cov_2rpw9h5isv.b[15][0]++;
			cov_2rpw9h5isv.s[94]++;

			return (cov_2rpw9h5isv.b[16][0]++, val.stack) || (cov_2rpw9h5isv.b[16][1]++, val.message);
		} else {
			cov_2rpw9h5isv.b[15][1]++;
		}
		cov_2rpw9h5isv.s[95]++;
		return val;
	}

	cov_2rpw9h5isv.s[96]++;
	createDebug.enable(createDebug.load());

	cov_2rpw9h5isv.s[97]++;
	return createDebug;
}

cov_2rpw9h5isv.s[98]++;
module.exports = setup;
});